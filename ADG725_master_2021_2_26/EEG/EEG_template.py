import pyqtgraph as pg
import array
import serial
import threading
import numpy as np
from queue import Queue
import time
from PyQt5 import QtWidgets
import sys
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import Qt
import inspect
import ctypes

#  pyqtgraph PyQt5 pyserial

i = 0
control = 0
data_length = 5000
curve = []
data = []
data_bytes = bytearray()
pw = []
que = []
index_now = []
process = []
f = []
velocity = []
label = []
rate = []

position = ['EEG', 'EEG', 'EEG', 'EEG']
EEG_name = ["EEG", "EEG", "EEG", "EEG"]
EEG_name_label = []
EEG_name_change = []

x_scale = [i1 * 10 / data_length for i1 in range(data_length)]

filter_parameter = [-0.000241862601478186, -0.00618333017151190, -0.00292015458774930, -0.00352860546326712, -0.00381533991703169, -0.00390240672340895, -0.00377155150017023, -0.00344323716575758, -0.00279819458188298, -0.00601017086427698, -3.23155675236391e-05, 0.000212473328685507, 0.000214100793306813, 0.000216402527767417, 0.000218739282812823, 0.000221743351354569, 0.000224804101431031, 0.000228482819103074, 0.000232195938703678, 0.000236564217288778, 0.000240943767462462, 0.000245970851519319, 0.000250998652576486, 0.000256657745943320, 0.000262331953388789, 0.000268593985116165, 0.000274871920464321, 0.000281780760067274, 0.000288670368598727, 0.000296166754004045, 0.000303612804371826, 0.000311621665358330, 0.000319681157459461, 0.000328270774612938, 0.000336820632867949, 0.000345946861787297, 0.000355001005403041, 0.000364616756871584, 0.000374146402646035, 0.000384209723779878, 0.000394269223207374, 0.000404791195744381, 0.000415224216487852, 0.000426184458410963, 0.000437027297644453, 0.000448379060034008, 0.000459765558908533, 0.000471333568861225, 0.000482911607282858, 0.000494986600433337, 0.000506906877652680, 0.000519305329636683, 0.000531529737419900, 0.000544200440201160, 0.000556806462295274, 0.000569559982355034, 0.000582328414402971, 0.000595530233654461, 0.000608485010925849, 0.000621823577937644, 0.000634900021395484, 0.000648342695208030, 0.000661555065762399, 0.000675117134004698, 0.000688403791089957, 0.000702043279205866, 0.000715381843108796, 0.000729054067871398, 0.000742407365294652, 0.000756063029655742, 0.000769407859054698, 0.000783014866177094, 0.000796269554108974, 0.000809811693810158, 0.000823010023445550, 0.000836534158739822, 0.000849804306071187, 0.000862880376581668, 0.000875875368957665, 0.000889015959093708, 0.000901726531231015, 0.000914637864425536, 0.000927098852298660, 0.000939745196939242, 0.000951980788164564, 0.000963985193933147, 0.000975902690662249, 0.000987863404503204, 0.000999301962470884, 0.00101085238151819, 0.00102187214629162, 0.00103295219110459, 0.00104356231803754, 0.00105420008369322, 0.00106426526370020, 0.00107438763009171, 0.00108391992383149, 0.00109349326064004, 0.00110246206252105, 0.00111142096023749, 0.00111981850897158, 0.00112814533048731, 0.00113582101515375, 0.00114348179432277, 0.00115048024202169, 0.00115744143033935, 0.00116371368951634, 0.00116987338019362, 0.00117535540074039, 0.00118073662429687, 0.00118538614602424, 0.00118993231236909, 0.00119372411711218, 0.00119738867541159, 0.00120027788790729, 0.00120297959160257, 0.00120492128143958, 0.00120665269011750, 0.00120751280477309, 0.00120804735319330, 0.00120726370147976, 0.00120395379003982, 0.00121034841823745, 0.00120782772642264, 0.00120616593551287, 0.00120439032045188, 0.00120167808111322, 0.00119854971248166, 0.00119423321954481, 0.00118768599169546, 0.00118849551267828, 0.00117826370380175, 0.00116964260821439, 0.00116155966230625, 0.00115288288038599, 0.00114412595970646, 0.00113455354716389, 0.00112473578487770, 0.00111404540735775, 0.00110309140380077, 0.00109119065810992, 0.00107899827062984, 0.00106583001694339, 0.00105234621155236, 0.00103788070284128, 0.00102305361433860, 0.00100725969895938, 0.000991109110440077, 0.000973924836167329, 0.000956366591383154, 0.000937760189315824, 0.000918783485189065, 0.000898855606782382, 0.000878439043818011, 0.000857013224487071, 0.000835192955475456, 0.000812311468299397, 0.000789039439625504, 0.000764706617741790, 0.000739983603268677, 0.000714263714007165, 0.000688023798852553, 0.000660774272953085, 0.000633122154475912, 0.000604403133739483, 0.000575285902687734, 0.000545145092325801, 0.000514393415934166, 0.000482782210449701, 0.000450732663425887, 0.000417602551447614, 0.000384065820239558, 0.000349452014218593, 0.000314433890628060, 0.000278384375382015, 0.000241768593738243, 0.000204319162481330, 0.000166397455591948, 0.000127376851742238, 8.79564657292383e-05, 4.74833967047798e-05, 6.63810489044910e-06, -3.52166166427070e-05, -7.74698170154019e-05, -0.000120743059008500, -0.000164376766574787, -0.000209035711985310, -0.000254039877429829, -0.000300054793305119, -0.000346403847545959, -0.000393727177543936, -0.000441399397317129, -0.000490021884272656, -0.000538928487812777, -0.000588779271352387, -0.000638904442534124, -0.000690024755427625, -0.000741945657849665, -0.000794112307623342, -0.000846866599757318, -0.000900534968419690, -0.000954463724692410, -0.00100931322615235, -0.00106440502022170, -0.00112039754519593, -0.00117694987402342, -0.00123361779035843, -0.00129089663487595, -0.00134902199135877, -0.00140732470603168, -0.00146645968876734, -0.00152576382459960, -0.00158582457829640, -0.00164609203427129, -0.00170713328715977, -0.00176828590882055, -0.00183020496494691, -0.00189221414612019, -0.00195496969209245, -0.00201780745711805, -0.00208132619171779, -0.00214496193493867, -0.00220926084010269, -0.00227356477602885, -0.00233853465262199, -0.00240350034764503, -0.00246912013565605, -0.00253473466327651, -0.00260090778059725, -0.00266704519661662, -0.00273375847047081, -0.00280037708395708, -0.00286755470661116, -0.00293461192481079, -0.00300220006183793, -0.00306965378901851, -0.00313755181866847, -0.00320531172702865, -0.00327353676801340, -0.00334155737096134, -0.00341003083372801, -0.00347825541575772, -0.00354517789333208, -0.00361483468403496, -0.00368359621189993, -0.00375210496384257, -0.00382099039889886, -0.00388955637275691, -0.00395844647831516, -0.00402702914165579, -0.00409462022410647, -0.00416463933065297, -0.00423293159934225, -0.00430063601640685, -0.00436857079613318, -0.00443606175889654, -0.00450377465941109, -0.00457103682869956, -0.00463844273595584, -0.00470535128738135, -0.00477240481916911, -0.00483890461156584, -0.00490551302352105, -0.00497152794905846, -0.00503760853558132, -0.00510307856094369, -0.00516854654472621, -0.00523338380974212, -0.00529822824769233, -0.00536237646399113, -0.00542647995954812, -0.00548982318221877, -0.00555304050484515, -0.00561563454279720, -0.00567802247336105, -0.00573963134371295, -0.00580109759609399, -0.00586172263644098, -0.00592217105107264, -0.00598174460932463, -0.00604108962521099, -0.00609967222311659, -0.00615789541165676, -0.00621521866947604, -0.00627227926006493, -0.00632838428419300, -0.00638419215480138, -0.00643910926114895, -0.00649351184744534, -0.00654699867703690, -0.00660014208053248, -0.00665224343118316, -0.00670396735022964, -0.00675461520852717, -0.00680484437331614, -0.00685404269786637, -0.00690262927149849, -0.00695022497422569, -0.00699736039329645, -0.00704332168212629, -0.00708877572881731, -0.00713303413937129, -0.00717676383550871, -0.00721932638367332, -0.00726132796114796, -0.00730210977070104, -0.00734233295951351, -0.00738130425982293, -0.00741969694326344, -0.00745682087666762, -0.00749334162154748, -0.00752861130129365, -0.00756324036148363, -0.00759659350844617, -0.00762935601598877, -0.00766087578240639, -0.00769190308490440, -0.00772195157877627, -0.00775006745468789, -0.00777780516092437, -0.00780463308405751, -0.00783007468280841, -0.00785480295372079, -0.00787814093886709, -0.00790077572794816, -0.00792219943021980, -0.00794181229522325, -0.00796123612781566, -0.00797965000057413, -0.00799660917368424, -0.00801281024646620, -0.00802758736085755, -0.00804158305078187, -0.00805421344617654, -0.00806604037878759, -0.00807643227509344, -0.00808605731032896, -0.00809424211442448, -0.00810165810383242, 0.000427892656374111, 0.210148774362507, 0.0961841951232815, 0.118230551261127, 0.129042660734055, 0.132877361306260, 0.129042660734055, 0.118230551261127, 0.0961841951232815, 0.210148774362507, 0.000427892656374112, -0.00810165810383242, -0.00809424211442448, -0.00808605731032896, -0.00807643227509344, -0.00806604037878758, -0.00805421344617655, -0.00804158305078187, -0.00802758736085755, -0.00801281024646620, -0.00799660917368424, -0.00797965000057413, -0.00796123612781566, -0.00794181229522325, -0.00792219943021980, -0.00790077572794816, -0.00787814093886709, -0.00785480295372079, -0.00783007468280841, -0.00780463308405751, -0.00777780516092437, -0.00775006745468789, -0.00772195157877627, -0.00769190308490440, -0.00766087578240639, -0.00762935601598877, -0.00759659350844617, -0.00756324036148363, -0.00752861130129365, -0.00749334162154748, -0.00745682087666761, -0.00741969694326344, -0.00738130425982293, -0.00734233295951351, -0.00730210977070104, -0.00726132796114797, -0.00721932638367332, -0.00717676383550871, -0.00713303413937129, -0.00708877572881731, -0.00704332168212629, -0.00699736039329645, -0.00695022497422569, -0.00690262927149849, -0.00685404269786638, -0.00680484437331614, -0.00675461520852717, -0.00670396735022964, -0.00665224343118316, -0.00660014208053248, -0.00654699867703690, -0.00649351184744534, -0.00643910926114895, -0.00638419215480138, -0.00632838428419299, -0.00627227926006493, -0.00621521866947604, -0.00615789541165676, -0.00609967222311659, -0.00604108962521099, -0.00598174460932463, -0.00592217105107264, -0.00586172263644098, -0.00580109759609399, -0.00573963134371295, -0.00567802247336105, -0.00561563454279720, -0.00555304050484515, -0.00548982318221877, -0.00542647995954812, -0.00536237646399113, -0.00529822824769233, -0.00523338380974212, -0.00516854654472621, -0.00510307856094369, -0.00503760853558132, -0.00497152794905846, -0.00490551302352105, -0.00483890461156584, -0.00477240481916911, -0.00470535128738135, -0.00463844273595584, -0.00457103682869956, -0.00450377465941109, -0.00443606175889654, -0.00436857079613318, -0.00430063601640685, -0.00423293159934225, -0.00416463933065297, -0.00409462022410647, -0.00402702914165579, -0.00395844647831516, -0.00388955637275691, -0.00382099039889886, -0.00375210496384257, -0.00368359621189993, -0.00361483468403496, -0.00354517789333208, -0.00347825541575772, -0.00341003083372801, -0.00334155737096134, -0.00327353676801340, -0.00320531172702865, -0.00313755181866847, -0.00306965378901851, -0.00300220006183793, -0.00293461192481079, -0.00286755470661116, -0.00280037708395708, -0.00273375847047081, -0.00266704519661662, -0.00260090778059725, -0.00253473466327651, -0.00246912013565605, -0.00240350034764503, -0.00233853465262199, -0.00227356477602885, -0.00220926084010269, -0.00214496193493867, -0.00208132619171779, -0.00201780745711805, -0.00195496969209245, -0.00189221414612019, -0.00183020496494691, -0.00176828590882055, -0.00170713328715977, -0.00164609203427129, -0.00158582457829640, -0.00152576382459960, -0.00146645968876734, -0.00140732470603168, -0.00134902199135877, -0.00129089663487595, -0.00123361779035843, -0.00117694987402342, -0.00112039754519593, -0.00106440502022170, -0.00100931322615235, -0.000954463724692410, -0.000900534968419690, -0.000846866599757318, -0.000794112307623342, -0.000741945657849665, -0.000690024755427625, -0.000638904442534124, -0.000588779271352386, -0.000538928487812777, -0.000490021884272656, -0.000441399397317130, -0.000393727177543936, -0.000346403847545958, -0.000300054793305119, -0.000254039877429829, -0.000209035711985310, -0.000164376766574787, -0.000120743059008500, -7.74698170154018e-05, -3.52166166427070e-05, 6.63810489044910e-06, 4.74833967047798e-05, 8.79564657292383e-05, 0.000127376851742238, 0.000166397455591948, 0.000204319162481330, 0.000241768593738243, 0.000278384375382015, 0.000314433890628060, 0.000349452014218593, 0.000384065820239558, 0.000417602551447614, 0.000450732663425887, 0.000482782210449701, 0.000514393415934167, 0.000545145092325801, 0.000575285902687734, 0.000604403133739483, 0.000633122154475912, 0.000660774272953085, 0.000688023798852553, 0.000714263714007165, 0.000739983603268677, 0.000764706617741790, 0.000789039439625505, 0.000812311468299397, 0.000835192955475456, 0.000857013224487071, 0.000878439043818011, 0.000898855606782382, 0.000918783485189065, 0.000937760189315824, 0.000956366591383154, 0.000973924836167329, 0.000991109110440078, 0.00100725969895938, 0.00102305361433860, 0.00103788070284128, 0.00105234621155236, 0.00106583001694339, 0.00107899827062984, 0.00109119065810992, 0.00110309140380077, 0.00111404540735775, 0.00112473578487770, 0.00113455354716389, 0.00114412595970646, 0.00115288288038599, 0.00116155966230625, 0.00116964260821439, 0.00117826370380175, 0.00118849551267828, 0.00118768599169546, 0.00119423321954481, 0.00119854971248166, 0.00120167808111322, 0.00120439032045188, 0.00120616593551287, 0.00120782772642264, 0.00121034841823745, 0.00120395379003982, 0.00120726370147976, 0.00120804735319330, 0.00120751280477309, 0.00120665269011750, 0.00120492128143958, 0.00120297959160257, 0.00120027788790729, 0.00119738867541159, 0.00119372411711218, 0.00118993231236909, 0.00118538614602424, 0.00118073662429687, 0.00117535540074039, 0.00116987338019361, 0.00116371368951634, 0.00115744143033935, 0.00115048024202169, 0.00114348179432277, 0.00113582101515375, 0.00112814533048731, 0.00111981850897158, 0.00111142096023749, 0.00110246206252105, 0.00109349326064004, 0.00108391992383149, 0.00107438763009171, 0.00106426526370020, 0.00105420008369322, 0.00104356231803754, 0.00103295219110459, 0.00102187214629162, 0.00101085238151819, 0.000999301962470884, 0.000987863404503204, 0.000975902690662249, 0.000963985193933147, 0.000951980788164564, 0.000939745196939242, 0.000927098852298660, 0.000914637864425536, 0.000901726531231015, 0.000889015959093708, 0.000875875368957665, 0.000862880376581668, 0.000849804306071186, 0.000836534158739822, 0.000823010023445550, 0.000809811693810157, 0.000796269554108974, 0.000783014866177094, 0.000769407859054698, 0.000756063029655742, 0.000742407365294652, 0.000729054067871398, 0.000715381843108796, 0.000702043279205866, 0.000688403791089957, 0.000675117134004698, 0.000661555065762400, 0.000648342695208030, 0.000634900021395484, 0.000621823577937644, 0.000608485010925849, 0.000595530233654461, 0.000582328414402971, 0.000569559982355034, 0.000556806462295274, 0.000544200440201160, 0.000531529737419900, 0.000519305329636683, 0.000506906877652680, 0.000494986600433337, 0.000482911607282858, 0.000471333568861225, 0.000459765558908533, 0.000448379060034008, 0.000437027297644453, 0.000426184458410963, 0.000415224216487852, 0.000404791195744381, 0.000394269223207374, 0.000384209723779878, 0.000374146402646035, 0.000364616756871584, 0.000355001005403041, 0.000345946861787297, 0.000336820632867949, 0.000328270774612938, 0.000319681157459462, 0.000311621665358330, 0.000303612804371826, 0.000296166754004045, 0.000288670368598727, 0.000281780760067274, 0.000274871920464321, 0.000268593985116165, 0.000262331953388789, 0.000256657745943320, 0.000250998652576486, 0.000245970851519319, 0.000240943767462462, 0.000236564217288778, 0.000232195938703678, 0.000228482819103074, 0.000224804101431031, 0.000221743351354569, 0.000218739282812823, 0.000216402527767417, 0.000214100793306813, 0.000212473328685507, -3.23155675236391e-05, -0.00601017086427698, -0.00279819458188298, -0.00344323716575758, -0.00377155150017023, -0.00390240672340895, -0.00381533991703169, -0.00352860546326712, -0.00292015458774930, -0.00618333017151190, -0.000241862601478186]
filter_parameter = np.array(filter_parameter)
ECG_buffer = np.zeros([4, 689])
ECG_buffer_control = np.zeros(4)

EEG_median_count = 5
EEG_median_buffer = np.zeros([4, EEG_median_count])
EEG_median_buffer_control = np.zeros(4)

def _async_raise(tid, exctype):
    """raises the exception, performs cleanup if needed"""
    tid = ctypes.c_long(tid)
    if not inspect.isclass(exctype):
        exctype = type(exctype)
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, ctypes.py_object(exctype))
    if res == 0:
        raise ValueError("invalid thread id")
    elif res != 1:
        # """if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect"""
        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, None)
        raise SystemError("PyThreadState_SetAsyncExc failed")


def stop_thread(thread):
    _async_raise(thread.ident, SystemExit)


def calcu_sub_str_num(mom_str, sun_str):
    count = 0  # 定义计数器初始值
    for i in range(len(mom_str) - 1):  # 因为i的下标从0开始，所以len（mom_str）-1
        if mom_str[i:i + len(sun_str)] == sun_str:
            count += 1
    return count


eeg_count = 8
eeg_length = eeg_count * 4 + 2


def serial_xx():
    global data_bytes
    global f, control, pw
    global rate
    global EEG_name_label
    global eeg_count, eeg_length
    global EEG_median_count, EEG_median_buffer, EEG_median_buffer_control
    while True:
        count = mSerial.inWaiting()
        if count:
            rec_str = mSerial.read(count)
            data_bytes = data_bytes + rec_str
            data_len = len(data_bytes)
            k = 0
            while k + eeg_length < data_len:  # 数据包为32个字节
                if data_bytes[k] == 0X41 and data_bytes[k + eeg_length] == 0X0A and 0X30 <= data_bytes[k + 1] <= 0X37:
                    p = data_bytes[k + 1] - 0X30
                    t = time.time()
                    if control:
                        f.write('\r\n' + str(round(t * 1000)) + ' A' + str(p) + ' ')
                    for k2 in range(eeg_count):
                        data_put = data_bytes[k + 2 + 4 * k2] * 16777216 + data_bytes[k + 3 + 4 * k2] * 65536 + data_bytes[k + 4 + 4 * k2] * 256 + data_bytes[k + 5 + 4 * k2]
                        if data_put > 2147483647:
                            data_put = data_put - 4294967296

                        # 工频及基线滤波
                        ECG_buffer[p][0:] = [*ECG_buffer[p][1:], data_put]
                        filtered = np.dot(ECG_buffer[p], filter_parameter)

                        # 中值滤波
                        EEG_median_buffer[p][int(int(EEG_median_buffer_control[p]) % EEG_median_count)] = data_put
                        filtered_median = np.median(EEG_median_buffer[p])
                        EEG_median_buffer_control[p] += 1

                        que[p].put(filtered_median)
                        if control:
                            f.write(str(data_put) + ' ')
                    rate[p] = rate[p] + 1
                    k = k + eeg_length
                elif data_bytes[k] == 0XCC and data_bytes[k + 1] == 0X77 and data_bytes[k + 2] == 0X77 and data_bytes[
                    k + 3] == 0XCC:
                    if calcu_sub_str_num((','.join(str(i) for i in data_bytes)), "69,69,71") == 5:
                        now_pos = 4 + k
                        old_pos = 4 + k
                        name_buffer = ""
                        name_order = 0

                        while now_pos + 2 < data_len - k:
                            if data_bytes[now_pos] == 0X45 and data_bytes[now_pos + 1] == 0X45 and data_bytes[now_pos + 2] == 0X47:
                                if old_pos + 3 < now_pos:
                                    for k3 in range(old_pos + 3, now_pos):
                                        name_buffer = name_buffer + str(data_bytes[k3] - 48)
                                    EEG_name[name_order] = name_buffer
                                    name_buffer = ""
                                    name_order += 1
                                    old_pos = now_pos
                            now_pos = now_pos + 1
                        k = k + 1
                        print(EEG_name[0] + EEG_name[1] + EEG_name[2] + EEG_name[3])
                        for k4 in range(4):
                            EEG_name_change[k4].setText(' 当前选择为: EEG' + EEG_name[k4])
                            EEG_name_label[k4].setText('EEG' + EEG_name[k4])

                        # #设置Title
                        # styles = {'color': '#000000', 'font-size': '16px', 'font-weight': 'bold'}
                        # for k5, graph_title in zip(range(4), EEG_name):
                        #     pw[k5].setTitle('EEG'+graph_title, **styles)

                    elif calcu_sub_str_num((','.join(str(i) for i in data_bytes)), "69,69,71") >= 2:
                        break
                    else:
                        k = k + 1
                else:
                    k = k + 1

            data_bytes[0:k] = b''


class MainWidget(QtWidgets.QMainWindow):
    def action_save(self):
        global f
        global control
        global rate, velocity, label, EEG_name_change

        if self.saveButton.text() == "SaveData":
            self.saveButton.setText("StopSaveData")
            fileName2, ok2 = QFileDialog.getSaveFileName(self,
                                                         "文件保存",
                                                         "./",
                                                         "Text Files (*.txt)")
            if not fileName2:
                fileName2 = "test1111.txt"
            f = open(fileName2, 'w')
            f.write('EEG Data of  ')
            f.write('   '.join(EEG_name) + '\r\n')
            f.write('Time————Channel————Data')
            control = 1
        elif self.saveButton.text() == "StopSaveData":
            self.saveButton.setText("SaveData")
            control = 0
            f.close()

    def action_cancel_save(self):
        global f
        global control
        if self.saveButton.text() == "StopSaveData":
            self.saveButton.setText("SaveData")
            control = 0
            f.close()

    @staticmethod
    def action_refresh():
        mSerial.write(("A" + "\r\n").encode())

    def action_update(self):
        global EEG_name_change, EEG_name_label
        EEG_name_change_flag = 1
        data_send_update = ""
        for u in range(4):
            if not EEG_name_change[u].text().isdigit():
                EEG_name_change_flag = 0
        if EEG_name_change_flag == 1:
            for u1 in range(4):
                data_send_update = data_send_update + EEG_name_change[u1].text() + ","
            print("data_send_update值为：" + data_send_update)
            for k4 in range(4):
                EEG_name_label[k4].setText("EEGxx")
            mSerial.write((data_send_update + "X").encode())
            self.action_cancel_save()

    def __init__(self):
        super().__init__()
        self.setWindowTitle("EEG_template")  # 设置窗口标题
        main_widget = QtWidgets.QWidget()  # 实例化一个widget部件
        main_layout = QtWidgets.QGridLayout()  # 实例化一个网格布局层
        main_widget.setLayout(main_layout)  # 设置主widget部件的布局为网格布局
        main_widget.setStyleSheet('QWidget{background:white;}')  # 设置背景为白色

        for k, graph_title in zip(range(4), position):
            pw.insert(k, pg.PlotWidget())
            pw[k].setLabel(axis='left', text='脑电幅值 / V')
            pw[k].setLabel(axis='bottom', text='时间 / 秒')
            # styles = {'color': '#000000', 'font-size': '16px', 'font-weight': 'bold'}
            # pw[k].setTitle(graph_title, **styles)
            pw[k].setBackground("w")

            data.insert(k, array.array('i'))
            data[k] = np.zeros(data_length).__array__('d')
            que.insert(k, Queue(maxsize=0))
            index_now.insert(k, 0)
            label.insert(k, QtWidgets.QLabel())
            label[k].setAlignment(Qt.AlignCenter)
            label[k].setText(' Efficiency:  0 % ')

            EEG_name_label.insert(k, QtWidgets.QLabel())  # 设置EEG设备名称label
            EEG_name_label[k].setAlignment(Qt.AlignCenter)
            EEG_name_label[k].setStyleSheet("color: #000000; font-size:24px; font-weight:bold")
            EEG_name_label[k].setText('EEGxx')

            EEG_name_change.insert(k, QtWidgets.QLineEdit())
            EEG_name_change[k].setText('请选择设备编号')

            rate.insert(k, 0)
            velocity.insert(k, 0)

        for k, p, d, color in zip(range(4), pw, data, ['#FF8C00', '#6495ED', '#FF6347', '#6A5ACD']):
            # 深橙色、矢车菊蓝、番茄色、板岩暗蓝灰色 https://www.sioe.cn/yingyong/yanse-rgb-16/
            curve.insert(k, (p.plot(d,  x=x_scale, pen=pg.mkPen(color=color))))
            p.setRange(yRange=[-1, 1])
            main_layout.addWidget(EEG_name_label[k], 1 + 3 * k, 1, 1, 5)
            main_layout.addWidget(pw[k], 2 + 3 * k, 1, 1, 5)  # 添加绘图部件到网格布局层
            main_layout.addWidget(label[k], 3 + 3 * k, 1, 1, 5)

        # 保存按钮
        self.saveButton = QtWidgets.QPushButton(main_widget)
        self.saveButton.setText("SaveData")
        self.saveButton.setStyleSheet("QPushButton{color:#FFA500}"
                                      "QPushButton:hover{color:#DC143C}"
                                      "QPushButton{background-color:#000000}"
                                      "QPushButton{border:1px}"
                                      "QPushButton{border-radius:10px}"
                                      "QPushButton{padding:6px 6px}"
                                      "QPushButton{font:bold 20px}")
        self.saveButton.clicked.connect(self.action_save)
        main_layout.addWidget(self.saveButton, 13, 1, 1, 4)

        # 刷新按钮
        self.refreshButton = QtWidgets.QPushButton(main_widget)
        self.refreshButton.setText("Refresh")
        self.refreshButton.setStyleSheet("QPushButton{color:#FFA500}"
                                      "QPushButton:hover{color:#DC143C}"
                                      "QPushButton{background-color:#000000}"
                                      "QPushButton{border:1px}"
                                      "QPushButton{border-radius:10px}"
                                      "QPushButton{padding:6px 6px}"
                                      "QPushButton{font:bold 20px}")
        self.refreshButton.clicked.connect(self.action_refresh)
        main_layout.addWidget(self.refreshButton, 13, 5, 1, 1)

        # 更新按钮
        self.updateButton = QtWidgets.QPushButton(main_widget)
        self.updateButton.setText("Update")
        self.updateButton.setStyleSheet("QPushButton{color:#FFA500}"
                                      "QPushButton:hover{color:#DC143C}"
                                      "QPushButton{background-color:#000000}"
                                      "QPushButton{border:1px}"
                                      "QPushButton{border-radius:10px}"
                                      "QPushButton{padding:6px 6px}"
                                      "QPushButton{font:bold 20px}")
        self.updateButton.clicked.connect(self.action_update)
        main_layout.addWidget(self.updateButton, 14, 5, 1, 1)

        # 选择更新框
        for k in range(4):
            main_layout.addWidget(EEG_name_change[k], 14, k + 1, 1, 1)

        self.setCentralWidget(main_widget)  # 设置窗口默认部件为主widget

    def closeEvent(self, event):
        result = QtWidgets.QMessageBox.question(self, "Impedance", "Do you want to exit?",
                                                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
        if result == QtWidgets.QMessageBox.Yes:
            stop_thread(th1)
            print("Close successfully")
            event.accept()
        else:
            event.ignore()


def consumer(a):
    while True:
        if index_now[a] < data_length:
            v_body = que[a].get() * 2.5 * 1000 / pow(2, 31) / 32
            data[a][index_now[a]] = v_body
            index_now[a] = index_now[a] + 1

        else:
            v_body = que[a].get() * 2.5 * 1000 / pow(2, 31) / 32
            data[a][:-1] = data[a][1:]
            data[a][index_now[a] - 1] = v_body


def plot_data():
    global x_scale
    for k in range(4):
        curve[k].setData(x_scale, data[k])


def rate_refresh():
    global rate, velocity, label
    for k in range(4):
        velocity[k] = rate[k] - velocity[k]
        valid = velocity[k] * 2 / 3
        velocity[k] = rate[k]
        label[k].setText(' Efficiency:  %d %%' % valid)


if __name__ == "__main__":
    # 设置端口号及波特率
    port_xx = "COM37"
    bps = 250000
    # 串口执行到这已经打开 再用open命令会报错
    mSerial = serial.Serial(port_xx, int(bps))
    if mSerial.isOpen():
        print("Open successfully")
        mSerial.flushInput()  # 清空缓冲区

    else:
        print("open failed")
        mSerial.close()  # 关闭端口
    app = QtWidgets.QApplication(sys.argv)
    gui = MainWidget()
    th1 = threading.Thread(target=serial_xx)
    th1.start()
    gui.show()
    timer = pg.QtCore.QTimer()
    timer.timeout.connect(plot_data)  # 定时刷新数据显示
    timer.start(30)  # 多少ms调用一次
    timer1 = pg.QtCore.QTimer()
    timer1.timeout.connect(rate_refresh)  # 定时刷新数据显示
    timer1.start(3000)  # 多少ms调用一次

    for k1 in range(4):
        process.insert(k1, threading.Thread(target=consumer, args=(k1,)))
        process[k1].daemon = True
        process[k1].start()
    mSerial.write(("A" + "\r\n").encode())
    sys.exit(app.exec_())
